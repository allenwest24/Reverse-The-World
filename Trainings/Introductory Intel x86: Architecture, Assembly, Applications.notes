Disclaimer: These notes were taken while watching an OpenSecurity Course (https://www.youtube.com/watch?v=H4Z0S9ZbC0g&list=PL038BE01D3BAEFDB0&index=2)

Skipping refreshers..

Architecture - Registers:
- Small memory storage areas (volatile)
- 8 general purpose + instruction pointer
- x86-32 has 32 bit registers.

Architecture - Register Conventions:
- There is loose syntax guidance for register use. They are normally used for certain conventions, but this is only for standardization and is not required.
- EAX storeds function return values
- EBX is the base pointer to the data section
- ECX is the counter for loops and such
- EDX is the I/O pointer
- ESI is the soruce pointer for string operations
- EDI is the destination pointer for string operations
- ESP is the stack pointer
- EBP is the stack frame base pointer
- EIP is the pointer to the next instruction to execute.
- Caller save registers means I am the caller of another function and I can assume they are going to destroy the values in certain registers (EAX, EDX, ECX) so I need to save these if I care about them.
- Callee save registers is the opposite of a caller save register. They need to make sure they dont destroy certain registers (EBP, EBX, ESI, EDI)

Architecture - Registers - 8/16/32 bit addressing:
- There are actually smaller portions of registers that you are allowed to access.
- When you move something into a 32 bit register, you could grab only abyte back out. 
- The subsections are two letters long (Ex: AX, AH)
- These are called short forms and are just subsections of larger registers.

Architecture - EFLAGS:
- Register that is 32 bits (E = extended)
- Series of signle bits with specific names
- Zero Flag (ZF) is an example of a specific bit that is used as a flag when the CPU is executing instructions.
- Central place to compare against so you don't have to track where a given value is.
- This is used for conditional logic.

First Instruction - NOP:
- Does nothing, jsut there to pad bytes or something like that
- This could be to pad out bounderies.
- Used to make certain buffer overflows more reliable.
- Alias for the XCHG (E)AX, (E)AX. 

The Stack:
- Conceptual area of main memory (RAM) which is designated by tthe OS. whena. program is started
- Diffwewnt start addresses by OS.
- Last-in-First-Out (LIFO/FILO) data sturcture where data is pushed on to the top of the stack and popped off the top.
- Like a stack of plate, if you want ot get the middle plate you have to remove the top ones first.
- The stack grows toward lower memory addresses. This is represented different ways by different people.
- ESP always points at the top of the stack, or the data that is being used at the top of the stack.
- Anything that is at a lower address is consdiered undefined, even if there is data living there.
- Only read form the top of the stack or below it for programs.
- Stack keeps track of which functions were called before the current one.
- Holds variables
- Frequently used to pass arguments to the next instrcution to be called.

Second Instruction - PUSH:
- Can either be an immediate or the value in a register.
- Side effect of the push instrcution is that the stack pointer moves by 4
- Decrement ESP by 4.
- Data gets added to RAM wherever the stack pointer (ESP) is and thats why the ESP register must be moved up (decremented)

POP:
- Take something off the top of the stack.
- PUSH backwards

Calling Conventions - cdecl:
- Most common for C code
- push onto stack right to left
- called fucntion saves the old frame pointer, saves the address on the stack and sets up a new stack frame.
- eax or edx:eax returns the result for primitive data types.
- caller is responsible for cleaning up the stack. the callee is responsible in stdcall

Calling Conventions - stdcall:
- Only seen by Microsoft C++ code

CALL - Call procedure:
- transfers control to a different function (moves eip)
- pushes the address to the next instruction onto the stack
- used by RET when a function is done.
- Changes eip to an address in the instruction

RET - return from procedure:
- two forms
  - Pop the top of the stack into eip, used just as 'ret', used by cdecl
  - pop the top of the stack into eip and add a constant number of bytes to esp, ret 0x8, used by stdcall

MOV - move:
- can move register to register
- memory to register, register to memory
- immediate to register, immediate to memory
- never memory to memory
- memory addresses are given in r/m32

General Stack Frame Operation:
- pretending for now that main() is the very first thing
- reserves places on the stack for its local variables
- if main wants to call some sub-routing (main is the caller), it calls saves on registers it wants to save.
- main pushes onto the stack the arguments it wants to pass down to the next function.
- pushes onto the stack the address of the saved return address for when the callee is done.
- first thing the subroutine does (sub()) is save the frame pointer (top of the local variables) onto the stack.
- Saves the previous frame pointer and then saves its own.
- saves claee save registers for any sub sub routines it want to run.
- saves local variables on the stack decalred within the function
- when sub wants to call a sub2 it does the same thing that main did.

Debugger Features:
- step into takes us to the target of the instruction.
- step over, do the subroutine and come back to the next instruction.
- step out takes you out of a subroutine

r/m32 Addressing Form:
- fromt he intel manuals, more complicated name normally
- theres a sequence of increasingly complex name to specify access of registers or memory
- in intel syntax, with the exception of 1 syntax, with [] enclosing a register, we are going to memory to pull the value from memory.
- [base + index*scale + displacement]

Control Flows:
- two forms, conditional and unconditional

JMP - Jump
- Set eip to something right now
- call is a more elaborate form that stores more things. 
- can also jump up to 4 bytes forward or backwards

Jcc - Jump if condition is met
- tons of types actually
- JNE == JNZ

Some notable jcc Instructions:
- JZ/JE
- JNZ/JNE
- JLE/JNG
- JBE
- JB
- Not worth  memorizing these flags because often a debugger will worry about that

Flag Setting:
- Before you do a conditional jump, you need to set the conditional flags for you.
- Typically done with CMP, TEST, or whatever instructions are already inline and happen to have flag-setting side-effects

CMP - Compare two operands
- subtract the second operand from the firsta dn then set the status flags in the same manner as the SUB instruction
- different from SUB because in sub the result needs to be stored. With CMP we just keep the flags.
- Modifies CF, OF, SF, AF, and PF

TEST - logical compare
- computed the bitwise logical AND.
- No result stored, just flags set.

AND -Logical AND
- destination operant can be r/m32 or register, same for source. Same rules apply for OR and XOR

SHL - Shift Logical Left
- Can be explicitly used with the C "<<" operator
- Moving it to the left is multiplying by 2
- first operand (source and destination) is an r/m32
- second operand is either cl (lowest byte of ecx), or a 1 byte immediate.
- The second operand is the number of places to shift.
- It multiplies by 2 every shift left.
- Bits shifted off the left hand side are "shifted into" (set) the carry flag (CF)

SHR - Shift Logical Right
- Can be explicitly used with the C ">>" operator
- First operand (source and destination) operrand is an r/m32
- second operand is either cl (lowest byte of ecx), or a 1 byte immediate.
- The second operand is the number of places to shift.
- It divides by 2 every shift right.
- Bits shifted off the right hand side are "shifted into" (set) the carry flag (CF)

IMUL - Signed Multiply
- Three forms, one, two, or three operands.
- Always stored to the left-most if mroe than one operand, and in eax if one oeprand.

DIV - Unisgned Divide
- Two forms, ax by r/m8 (al = quotient, ah = remainder), and edx:eax by r/m32 (eax = quotient, edx = remainder)
- 0 exception if divided by 0.



















